package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _assets_server_tls_snakeoil_crt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\xbd\x92\xb2\x48\x03\x46\x73\xae\xe2\xcb\xad\xaf\x74\x04\x11\x82\x0d\x1a\xba\x69\x1a\x01\x05\x1a\x04\x33\xfe\x04\x6c\xb0\x11\x86\xe1\xe7\xea\xb7\xe6\x0d\xb6\xb6\x6a\x9f\xf0\xd4\x13\x9c\xe4\xfc\xff\x77\x1a\xc2\xc4\xfd\x9f\x8e\x7c\x4a\x0c\xa2\x03\x8a\xfe\x50\xc1\x21\x44\x9f\xa8\xae\x83\x14\xe9\x06\x56\xea\xf3\x07\x14\xf9\x5c\xb8\xed\xce\x90\x9f\xcd\x1e\x07\xaf\x22\x0d\x96\xac\x75\xc0\x01\xeb\xc1\x07\x07\x24\x13\xa1\x87\x34\x7d\x0e\x81\xa3\xb1\x45\x30\x36\x10\x69\x95\x1b\x69\xc0\x71\x60\x77\x7a\xe7\x9d\x3a\xd8\xdd\xd7\x56\xdc\x4f\x3f\x76\xe7\x4e\x8e\x26\xc5\x90\x92\xd9\x81\x64\xbe\x52\x70\x70\xb6\x7c\x73\x5b\x1e\x43\xea\x6c\x0e\x05\x8b\x70\x85\xff\xc0\x19\x53\x14\x3b\x5a\x88\xc1\x57\x88\xc0\x3c\x5f\xb3\xae\x58\xb3\xe3\x38\x65\xb1\xfb\x95\x75\xca\x94\x1c\xa5\xb9\xaa\x50\xf3\x6f\x1b\xe1\x57\x07\x78\x21\x00\x12\xd1\xe0\x0c\x7e\x0f\x17\xc0\x89\x06\x3c\xe8\x80\xa2\x9e\xf0\xbb\x2e\x55\x86\x9b\x7a\x50\xbc\x88\xdb\xd8\x6d\x1a\x9b\xd5\xad\x27\x93\xfd\x9b\x8b\x49\x29\xcc\x3b\xd2\x3b\xe7\x21\x6e\x9f\x8f\x01\xc6\x53\x53\xe9\x8a\x17\x8a\xa9\xfb\xa3\x6a\x17\x64\x8e\xbe\x57\x20\x5b\x9e\xc6\xab\x9f\xd4\x27\x5a\x1c\x72\x68\xc3\xd0\x2f\xd5\x4f\xa4\x2f\x9c\x67\xd9\x5b\xb8\x45\x8e\x24\xdb\x73\xfc\xad\x49\x99\x73\xd4\xa2\x9e\x29\xeb\xa0\xc7\x86\x42\x06\xa6\x58\xa2\x77\x7f\x74\x0b\x8e\x6e\x09\xbd\x19\x77\x25\x7d\x0c\x5d\x30\xf0\x9c\xd4\x48\xb5\xe5\xe5\xb4\x2e\xaa\xb0\x67\x0f\x05\xdc\xe6\xfa\xf2\x60\xf9\xa5\x7d\xe4\xc5\x66\xa5\x2f\xb0\xa3\x75\xb2\xd3\xbf\x00\x65\x52\xaa\x3d\x9f\xa6\x17\xe0\x5c\xad\x7b\xb3\x9c\xc6\x25\x31\x7f\x00\xa9\xe8\x8d\x48\x97\x8e\xf9\x82\xbf\x5a\x14\x3a\x2f\x0e\xd4\xe5\x21\x7d\xb7\x62\x8e\x57\x0b\x32\x0b\x4d\x13\x9e\xc2\x8e\xb6\xc6\x65\x3c\xbc\xc7\xfb\x58\x5a\x36\xaa\xfb\x11\x52\x14\xb9\xe7\x9e\x6c\xb2\xdb\x3b\x22\x68\x46\xc1\x3c\x17\xf1\xb6\xe7\xb6\x75\x0a\x8f\xe6\x2e\x91\x3e\xee\x8e\xc4\x1a\x35\xba\x90\xf6\x57\x50\x7c\x05\x07\xe2\xb7\xcb\x99\xef\x0f\xec\xdd\x19\xeb\x0d\x54\x8e\x06\x00\x9a\xa1\x97\x58\x17\xfe\x20\x42\xfd\x93\xbb\xc0\x43\xb6\xe6\x01\x58\x55\x48\x03\x66\x6b\x80\x33\x39\xcc\x79\x38\x6e\xb6\x28\x27\x8d\xdf\xa5\x29\x9f\x71\xa2\xf4\xac\x20\xf6\x75\x5d\xe1\xbb\x78\x8e\x91\x32\x6f\x83\xa4\xbe\x04\xe3\x99\xfa\x1b\x94\xee\x12\xa2\x89\xf5\xcd\x87\x76\x5b\xf5\x13\x8a\x57\xeb\xa5\x2a\x3b\x7d\x57\xd8\xba\x4b\x02\x71\x08\xf4\xec\xd3\xcb\xf7\x79\xb8\x2a\x75\x30\x5a\x37\xb3\xb6\x17\x53\x32\x99\x2b\x10\xd1\x07\xe6\xd2\x6c\x67\x66\xe2\x0d\x47\xc7\x92\x4d\x37\xbe\x2e\x1b\xce\x8f\x3a\x1b\xc5\xd8\x24\xf6\xf8\x38\xe1\x9d\x92\x29\x31\xac\x0b\xeb\xad\x11\x50\xd3\xa6\xb9\xbd\x9b\xaa\x0d\x0f\x54\xc8\xe4\xf8\xc3\xdc\x77\xe0\x65\x5c\xbc\x07\x52\x93\x06\xf2\xf3\x95\x76\x3d\x3a\xa7\xe1\xcf\x9e\x0f\x5c\x8b\x31\x16\x65\x5b\xab\xf2\xf4\xc1\x4b\x51\x2d\x83\x92\x32\xa0\xfa\xe0\xc0\x6a\xc5\x1a\x05\xf7\xcc\x43\x19\xe2\xeb\x9d\x35\x71\x65\x83\x63\x9f\x28\x4c\x3a\x76\x12\x02\x56\x9a\x8e\xad\x7b\x35\x5f\x2c\xba\xc8\x81\x6b\x43\x6d\x72\xc5\x7c\x8a\xcc\x6f\x0e\x3d\xff\x52\xef\x6d\x4e\x90\x2c\xb0\xfa\xaa\x6c\x99\x97\xe2\x43\xb7\xf8\x72\x5b\x32\x67\xe6\x49\x05\x82\xfb\xb7\x73\x04\x93\x68\x7c\x0c\x71\x11\xcb\xfc\x2f\xe1\x4f\xbc\xc8\x85\xff\x0d\xfa\xef\x00\x00\x00\xff\xff\xfb\xe7\xbc\x5e\xed\x03\x00\x00")

func assets_server_tls_snakeoil_crt() ([]byte, error) {
	return bindata_read(
		_assets_server_tls_snakeoil_crt,
		"assets/server/tls/snakeoil.crt",
	)
}

var _assets_server_tls_snakeoil_key = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xac\x5a\x02\x85\x61\xcf\x53\x1c\x4f\x4d\xd1\x40\x13\x5a\x8c\xd8\xe4\x9c\xb3\x23\xe7\x86\x26\xc3\xd3\x4f\xcd\xb9\xf6\x2e\xbb\xcc\xef\xbe\xff\xfc\x7f\x0c\x2f\xca\xc6\x1f\xc7\x05\x7f\x2c\x47\x0e\x80\xc7\xff\x51\xf9\xf8\xef\x03\xe9\xb2\xcc\xcf\xb6\xcc\x00\xa0\xb2\xc0\xe6\xc1\x03\xa4\x38\x6b\xe6\x77\x74\x24\xcc\x34\xa5\x08\x2f\xa4\xec\xd5\xc5\x53\x4b\xc8\x89\x6f\xb6\x16\x41\x1a\x98\xb4\x5a\xad\xea\x99\x24\x4a\x44\x18\x94\x9e\x28\x35\x4d\xe0\xe0\x05\x03\xeb\x32\xc4\x76\x1b\x86\xe2\x7d\xc9\x61\xe1\x65\xe1\xfa\x50\x2e\x7d\xbc\x90\xc0\x7d\xa2\x7c\x74\xa4\x83\xbd\xa6\xaa\x88\x11\x0f\xea\x99\x66\x4b\x0b\x94\x5d\x42\xe2\x63\xd4\x41\x9a\x58\xfa\xef\x1c\xae\x8a\x55\x09\x8b\x2d\x5e\xc2\x98\xac\xce\xe0\x61\xfc\x73\x05\x87\x38\xa6\x44\xff\x23\x25\x56\x76\x2c\x17\x5e\xcb\x7c\xad\x2a\x42\xac\x00\x47\xcb\xee\x98\x40\x12\x3b\x87\x91\x94\xdf\xe1\x74\x5a\xfd\x3b\xb4\xea\xcd\xe6\x09\x53\xac\x23\xfc\x7a\xf1\xcd\xd7\x8a\x53\x07\x5f\x16\x3d\x64\xa8\x93\x95\xf9\xe7\x36\xd9\x79\xe6\xfd\xbc\xf5\xcf\x47\x26\x81\x95\x43\x61\xa9\x25\x05\xce\xac\xad\x4d\xb0\x8e\xb6\x34\xcb\xa0\xf4\x84\xe3\x2e\x86\x42\x09\x8b\xd4\xba\x97\x9c\x66\xe0\x75\x09\x5e\x49\xba\x3a\xdc\xa5\x9e\x71\xca\x0b\x03\xe3\x01\x8d\x90\xec\x5d\x06\x90\xd1\x20\xa3\xa9\x76\x55\x2b\x9c\xfe\x95\x0c\x3c\xe9\xd5\x52\xe1\x6f\x2c\x9f\xe4\x25\x69\x7d\x14\x85\x68\xf2\xee\x94\x39\x60\x03\x06\x4c\x32\x03\x6c\x76\xd6\xce\x34\x17\x8d\x7d\x2c\xbc\x6c\x83\x62\x16\xff\xf6\x5a\x1e\x39\x6d\x66\xdc\x5a\x78\x83\xf8\x14\x25\x78\x43\x3a\xa6\x58\x29\xa4\x34\xaa\x41\xe1\xd2\xd8\xf7\x77\x25\xb0\x9c\xb5\xf1\xf7\xcc\x46\x45\x20\x45\x17\xbc\x75\xb3\xde\x86\xd0\x8c\x96\xfa\x5a\xda\xed\x66\xee\xf1\x71\x50\x3e\xf0\x93\x1f\x81\x49\x01\x8a\x55\x9c\xc0\xc3\xf1\xa4\xf7\x3b\x99\xa6\xfc\xe4\x63\xf5\x3d\x50\x17\x37\x0b\x4c\x40\xab\x13\x6e\x87\x58\xf1\xb4\x07\x94\xef\x48\x3a\xea\x5c\xc2\xad\x79\x7f\x1b\x44\x72\x06\x29\x2d\xec\xfd\x09\xd3\x5e\x9e\xf0\xe2\xf7\x13\x6b\xdf\x6d\xaf\xe4\x87\xe9\xd6\x77\x95\xfe\x3a\x3c\xbf\x89\xd6\xf3\x43\x98\xdb\xd0\x10\xa8\x90\x96\xd0\x55\xfe\x5d\xf6\xad\x05\x70\x3e\xa4\x98\xd7\xae\x6c\xbb\x01\xf7\x2c\xc4\x29\xcf\xdf\x45\x37\xda\x22\xf7\x1a\x2f\xd3\xe0\xc7\x20\x5f\x9e\xfe\x1c\x94\x7e\xba\x65\x97\xd8\x71\x64\x39\x4a\xc8\x1d\x6a\xde\xda\xf4\xc0\x4c\x93\x39\x09\x2b\x19\xed\x11\x5c\x0c\x1c\xa0\xb9\x64\x4c\xc6\xbe\x5d\x82\xe3\x7c\xa2\xf7\x1b\x10\xda\x82\x58\xaf\x89\x7c\x06\xa1\x39\x0a\x04\x19\xe8\x4e\x9b\xc6\x08\x52\x99\x34\x10\x3f\x8d\x03\x26\x91\x01\xa6\x47\x53\x87\xaf\x7e\x53\xc4\x38\xb8\x79\xf0\xd0\x80\xc8\x06\x3b\x33\xdf\xa6\xda\x0d\xc2\x8e\x25\x8f\xea\xe0\x67\x35\xcd\x3a\xa5\xec\x07\xb8\x7f\xac\x08\x7d\x3c\xcf\x04\xb0\xbf\x9a\xd6\x0b\xc5\x96\x98\x96\xdd\xb5\xc5\xe0\xf3\xcd\xb7\x9d\xb2\x67\x43\x1e\x07\xdf\x75\x95\x89\xdc\x6a\xe0\x7c\xed\xd7\xaf\x4d\xd4\xb1\x54\x8c\x55\x70\xe5\xf2\xb5\x61\x3d\x04\x27\x9c\x9c\x77\xa5\x9d\x05\x67\x1e\x22\x58\x98\xca\xe9\xf3\x8c\x3f\xbe\xb9\xe5\x26\xdb\x96\xbb\xb0\xae\xda\x3c\x2a\x61\xfe\x25\x58\x6f\x7f\x06\xec\xa9\xc2\x84\x3a\x3f\xff\x14\xdb\x2e\xd4\x72\x12\x96\xe5\x2f\xdf\xd2\x7c\x9a\x40\x35\xf7\x3a\x8f\x9f\xfc\x6c\xce\xa2\x38\x5d\x5d\x90\xd4\xc7\x1f\xbf\x8e\x95\x29\x9d\xfd\x26\xd1\xec\xa2\x3e\xfa\xc7\x79\xd4\xed\x05\x04\x8d\x31\x08\x4f\x87\xca\x81\x6b\x34\xf6\x55\x83\x20\x43\xbc\x1b\x33\x14\xb6\x8b\x8e\x96\x95\x54\x67\x0d\xfd\x7b\x38\x84\xae\x09\x0d\x9a\x9b\x08\x62\x37\xf4\x34\xb2\xf3\x54\x01\x36\x0b\xc4\xda\x64\xb6\xb0\xc3\x18\x88\xcb\xf2\xfc\xdb\x4d\x2c\x43\x91\x91\x5f\x10\x12\x27\x51\xd7\x5c\x65\x57\x27\x9b\xa8\xbd\x25\x93\x09\x02\x94\x3c\x6f\xea\x6f\xb2\x2a\xf8\xc9\xac\x3e\xa4\x9d\xd1\xd5\xf5\xbd\x42\xd5\x75\xa1\xbb\x41\xb7\xa1\x87\x05\xa2\xe4\xad\xd9\x2b\x47\x98\x69\x44\x2b\x2e\xa2\x4e\x36\xd2\x95\xad\x34\x2e\xf5\xbf\x89\xf8\x9a\x48\xe4\xeb\xbc\xe5\x14\xfd\x48\xce\xba\x17\x1f\x36\x2a\xb9\xe9\x3a\x62\x11\x0a\xac\x8b\x13\xb7\x57\xb3\xd5\x74\x30\x76\x36\xbb\xe9\x95\x9a\x55\xc1\x2e\x2f\xec\x8d\x05\xfc\x47\xbf\x37\x2e\x2a\x5e\x17\x7e\xff\x2a\x4b\xb8\xe8\x46\x8d\x7f\x5b\x3f\x2d\xc3\x81\x22\xe4\x5c\x18\x50\x66\xb7\xa2\x07\x07\x9e\xf0\x2b\x10\x8d\x50\xc2\x89\x46\x59\x4b\x91\x0c\x30\x89\x20\xc5\x75\x64\xb9\x67\xb1\xd4\x2d\x9a\xa9\x32\x7c\x30\xc4\x93\xf2\x40\x08\x3c\x66\x2b\xfb\x3d\x32\x10\xb7\x80\x3a\x4c\x24\x71\xe4\x4b\x7f\x7e\x86\x92\xbc\x60\x13\x5e\xb1\x1b\xc6\xac\x2a\xbf\x30\x7d\x69\xa4\x08\x9f\x17\xdc\x77\xd6\x83\x19\xc7\x9f\x03\xc3\x1d\x13\x2f\x08\xc7\x9c\x4d\x93\xa0\x37\xac\x26\x09\x54\x24\x83\xc2\x5f\xd8\x37\x16\xc3\x98\x1c\xa5\x80\xc0\xf3\xe0\x38\x39\x27\xda\x7f\x23\xe3\x1e\x0f\xd1\xbd\x92\x68\xd2\xf6\xf0\x66\xf1\x22\x40\xb5\xbb\xd0\x22\xb3\xbe\x28\xb0\xcb\x18\x71\xba\x29\x74\x32\x55\x42\x07\x3d\x5b\xc7\x3c\x38\x58\x58\x4a\x3f\x75\x2d\x18\xc1\x50\x6b\x97\x39\xcb\xa2\x2f\x2e\xb3\xf5\x6e\x10\xbc\x13\xf2\xb9\x70\xe2\xd7\xaf\x71\x4b\xd7\x9e\x26\x31\xdf\xe4\x83\x1f\x4e\x88\x94\x09\x86\xe1\xe6\xf5\x85\xe4\xab\x85\x00\x53\xef\x69\xb3\x83\x37\x9a\xf3\x7e\x3e\xa7\xf7\xa4\x6d\x6b\x39\x6e\xa5\x94\x2f\x93\x76\x87\x3c\x61\xf4\xfa\x66\x2f\xd1\x50\xe7\xeb\xd0\x3e\x1f\x0c\x81\xb8\x49\x22\xe7\x74\x10\x3c\x4a\xf1\xee\x6f\x7f\x7e\x42\xc6\x69\x54\x7a\x36\x0d\x41\xdf\x31\x92\xe5\x29\xc7\x10\x2e\x2d\x99\xf9\x9a\x8c\xae\xcf\x4a\x77\x94\x46\xff\xea\xff\x42\x7f\x59\xe1\x0d\xee\xdf\xb9\xf9\x5f\x00\x00\x00\xff\xff\x0f\x83\x93\xdb\x8f\x06\x00\x00")

func assets_server_tls_snakeoil_key() ([]byte, error) {
	return bindata_read(
		_assets_server_tls_snakeoil_key,
		"assets/server/tls/snakeoil.key",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"assets/server/tls/snakeoil.crt": assets_server_tls_snakeoil_crt,
	"assets/server/tls/snakeoil.key": assets_server_tls_snakeoil_key,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"server": &_bintree_t{nil, map[string]*_bintree_t{
			"tls": &_bintree_t{nil, map[string]*_bintree_t{
				"snakeoil.crt": &_bintree_t{assets_server_tls_snakeoil_crt, map[string]*_bintree_t{
				}},
				"snakeoil.key": &_bintree_t{assets_server_tls_snakeoil_key, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
