name: Release

on:
  push:
    tags: [ v* ] # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    permissions: write-all
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.18
      uses: actions/setup-go@v1
      with:
        go-version: 1.18
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Install go-bindata
      run: go install -a -v github.com/go-bindata/go-bindata/...@latest

    - name: Build
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        go-bindata -pkg=assets -o=client/assets/assets.go assets/client/...
        CGO_ENABLED=0 GOARCH=amd64 GOOS=windows go build -o windows-amd64/ngrok.exe ./main/ngrok
        CGO_ENABLED=0 GOARCH=386 GOOS=windows go build -o windows-386/ngrok.exe ./main/ngrok
        CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -o linux-amd64/ngrok ./main/ngrok
        CGO_ENABLED=0 GOARCH=386 GOOS=linux go build -o linux-386/ngrok ./main/ngrok
        CGO_ENABLED=0 GOARCH=amd64 GOOS=darwin go build -o darwin-amd64/ngrok ./main/ngrok
        tar -zcvf ngrok-windows-amd64.tar.gz windows-amd64/ngrok.exe
        tar -zcvf ngrok-windows-386.tar.gz windows-386/ngrok.exe
        tar -zcvf ngrok-linux-amd64.tar.gz linux-amd64/ngrok
        tar -zcvf ngrok-linux-386.tar.gz linux-386/ngrok
        tar -zcvf ngrok-darwin-amd64.tar.gz darwin-amd64/ngrok
        echo ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset Ngrok Win 64
      id: upload-release-ngrok-windows-amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./ngrok-windows-amd64.tar.gz
        asset_name: ngrok-windows-amd64.tar.gz
        asset_content_type: application/tar.gz

    - name: Upload Release Asset Ngrok Win 386
      id: upload-release-ngrok-windows-386
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./ngrok-windows-386.tar.gz
        asset_name: ngrok-windows-386.tar.gz
        asset_content_type: application/tar.gz

    - name: Upload Release Asset Ngrok Linux 64
      id: upload-release-ngrok-linux-amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./ngrok-linux-amd64.tar.gz
        asset_name: ngrok-linux-amd64.tar.gz
        asset_content_type: application/tar.gz

    - name: Upload Release Asset Ngrok Linux 386
      id: upload-release-ngrok-linux-386
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./ngrok-linux-386.tar.gz
        asset_name: ngrok-linux-386.tar.gz
        asset_content_type: application/tar.gz

    - name: Upload Release Asset Ngrok Darwin 64
      id: upload-release-ngrok-darwin-amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./ngrok-darwin-amd64.tar.gz
        asset_name: ngrok-darwin-amd64.tar.gz
        asset_content_type: application/tar.gz